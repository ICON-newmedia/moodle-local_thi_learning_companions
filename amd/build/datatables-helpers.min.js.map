{"version":3,"file":"datatables-helpers.min.js","sources":["../src/datatables-helpers.js"],"sourcesContent":["/* eslint-disable jsdoc/require-param-type, valid-jsdoc */\nimport $ from 'jquery';\n// import 'local_learningcompanions/jquery.dataTables';\nimport 'local_learningcompanions/datatables';\n\n/**\n * Adds a default \"value is included in the column\" search to the datatables search.\n *\n * @param selector {string}\n * @param table {*}\n */\nexport const setupSearchRules = (selector, table) => {\n    $(selector).each(function() {\n        $(this).on('keyup change clear', function() {\n            let elementValue;\n\n            if (this.type === 'checkbox') {\n                elementValue = this.checked ? 1 : '';\n            } else {\n                elementValue = this.value;\n            }\n\n            let column;\n            // Check of the target is a number\n            if (isNaN($(this).data('target'))) {\n                column = table.column(`.${$(this).data('target')}`);\n            } else {\n                column = table.column($(this).data('target'));\n            }\n            column.search(elementValue).draw();\n        });\n    });\n};\n\n/**\n * Adds the elements to the datatables search, for an OR value search.\n * The elements need a data-target attribute, which is the column index or class to search.\n *\n * @param selector\n */\nexport const initOrSearch = (selector) => {\n    $(selector).each(function() {\n        addOrSearch($(this));\n    });\n};\n\n/**\n * Adds a specific element to the datatables search, for an OR value search.\n *\n * @param element {jQuery} The element the search relates to.\n */\nexport const addOrSearch = (element) => {\n    $.fn.dataTable.ext.search.push(function(settings, data) {\n        let searchVal = element.val() ?? '';\n\n        //If the search value is empty, don´t filter it.\n        if (!searchVal) {\n            return true;\n        }\n\n        const indexes = getTargetColumnIndexes(settings, element);\n        if (indexes === null) {\n            return true;\n        }\n\n        for (const index of indexes) {\n            /**\n             * @type {string}\n             */\n            if (data[index].includes(searchVal)) {\n                return true;\n            }\n        }\n        return false;\n    });\n};\n\n/**\n * Adds the elements to the datatables search, for a minimum value search.\n * The elements need a data-target attribute, which is the column index to search.\n *\n * @param selector\n */\nexport const initMinSearch = (selector) => {\n    $(selector).each(function() {\n        addMinSearch($(this));\n    });\n};\n\n/**\n * Adds a specific element to the datatables search, for a minimum value search.\n *\n * @param element {jQuery} The element the search relates to.\n */\nexport const addMinSearch = (element) => {\n    $.fn.dataTable.ext.search.push(function(settings, data) {\n        let min = element.val() ?? '';\n\n        if (!min) {\n            return true;\n        }\n\n        if (element.attr('type') === 'date') {\n            const minDate = new Date(min);\n            min = minDate.getTime() / 1000;\n        }\n\n        let index = getTargetColumnIndexes(settings, element);\n        if (index === null) {\n            return true;\n        }\n        index = index[0];\n\n        /**\n         * @type {number}\n         */\n        const value = +data[index];\n        if (min) {\n            return value >= min;\n        }\n        return true;\n    });\n};\n\n/**\n * Adds a specific select element to the datatables search, for an include search value search.\n * The element should be an element, that can select multiple values. Otherwise, just use the setupSearchRules function.\n * The elements should have a data-target attribute, which is the column index to search.\n *\n * @param selector {string}\n */\nexport const initIncludeSearch = (selector) => {\n    $(selector).each(function() {\n        addIncludeSearch($(this));\n    });\n};\n\n/**\n * Adds a specific select element to the datatables search, for an include search value search.\n *\n * @param element {jQuery} The element the search relates to.\n */\nexport const addIncludeSearch = (element) => {\n    $.fn.dataTable.ext.search.push(function(settings, data) {\n        /**\n         * @type {string[]}\n         */\n        const include = element.val() ?? [];\n\n        let index = getTargetColumnIndexes(settings, element);\n        if (index === null) {\n            return true;\n        }\n        index = index[0];\n\n        /**\n         * @type {string}\n         */\n        const value = data[index];\n\n        if (include.length) {\n            return include.every((item) => value.includes(item));\n        }\n        return true;\n    });\n};\n\n/**\n * This function adds an event listener to the given selector that will redraw the given table\n *\n * @param selector {string}\n * @param table {*}\n */\nexport const addRedrawEvent = (selector, table) => {\n    $(selector).on('change keyup clear', function() {\n        table.draw();\n    });\n};\n\n/**\n *\n * @param settings {*}\n * @param className {string}\n *\n * @returns {null|int}\n */\nconst getIndexByClass = (settings, className) => {\n    for (const index in settings.aoColumns) {\n        if (settings.aoColumns[index].nTh.classList.contains(className)) {\n            return +index;\n        }\n    }\n\n    return null;\n};\n\n/**\n *\n * @param settings {*}\n * @param element {jQuery}\n * @returns {null|int[]}\n */\nconst getTargetColumnIndexes = (settings, element) => {\n    const targetData = element.data('target');\n\n    // It´s not set? Return null.\n    if (targetData === undefined) {\n        // eslint-disable-next-line no-console\n        console.error('data-target is not defined or not a number for', element);\n        return null;\n    }\n\n    //if it´s just a single number, return it\n    if (!isNaN(targetData)) {\n        return [targetData];\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(targetData);\n\n    //Split it, so we can support multiple classes.\n    const targetArray = targetData.split(',');\n\n    //Map the array to the index.\n    return targetArray.map((target) => {\n        // It´s a number? Return it.\n        if (!isNaN(target)) {\n            return target;\n        }\n\n        // It´s a string? Try to find the index by the class name.\n        return getIndexByClass(settings, target);\n    });\n};\n"],"names":["selector","table","each","this","on","elementValue","type","checked","value","isNaN","data","column","search","draw","addOrSearch","element","fn","dataTable","ext","push","settings","searchVal","val","indexes","getTargetColumnIndexes","includes","addMinSearch","min","attr","Date","getTime","index","addIncludeSearch","include","length","every","item","targetData","undefined","console","error","log","split","map","target","className","aoColumns","nTh","classList","contains","getIndexByClass"],"mappings":"8uDAWgC,SAACA,SAAUC,2BACrCD,UAAUE,MAAK,+BACXC,MAAMC,GAAG,sBAAsB,eACzBC,aAGAA,aADc,aAAdF,KAAKG,KACUH,KAAKI,QAAU,EAAI,GAEnBJ,KAAKK,OAKpBC,OAAM,mBAAEN,MAAMO,KAAK,WACVT,MAAMU,mBAAW,mBAAER,MAAMO,KAAK,YAE9BT,MAAMU,QAAO,mBAAER,MAAMO,KAAK,YAEhCE,OAAOP,cAAcQ,oCAWZ,SAACb,8BACvBA,UAAUE,MAAK,WACbY,aAAY,mBAAEX,eASTW,YAAc,SAACC,yBACtBC,GAAGC,UAAUC,IAAIN,OAAOO,MAAK,SAASC,SAAUV,uBAC1CW,+BAAYN,QAAQO,2CAAS,OAG5BD,iBACM,MAGLE,QAAUC,uBAAuBJ,SAAUL,YACjC,OAAZQ,eACO,iDAGSA,4DAAS,IAIrBb,kBAAYe,SAASJ,kBACd,4DAGR,8DAUc,SAACrB,8BACxBA,UAAUE,MAAK,WACbwB,cAAa,mBAAEvB,eASVuB,aAAe,SAACX,yBACvBC,GAAGC,UAAUC,IAAIN,OAAOO,MAAK,SAASC,SAAUV,wBAC1CiB,0BAAMZ,QAAQO,6CAAS,OAEtBK,WACM,EAGkB,SAAzBZ,QAAQa,KAAK,UAEbD,IADgB,IAAIE,KAAKF,KACXG,UAAY,SAG1BC,MAAQP,uBAAuBJ,SAAUL,YAC/B,OAAVgB,aACO,MAOLvB,OAASE,KALfqB,MAAQA,MAAM,WAMVJ,KACOnB,OAASmB,sEAaK,SAAC3B,8BAC5BA,UAAUE,MAAK,WACb8B,kBAAiB,mBAAE7B,eASd6B,iBAAmB,SAACjB,yBAC3BC,GAAGC,UAAUC,IAAIN,OAAOO,MAAK,SAASC,SAAUV,wBAIxCuB,8BAAUlB,QAAQO,6CAAS,GAE7BS,MAAQP,uBAAuBJ,SAAUL,YAC/B,OAAVgB,aACO,MAOLvB,MAAQE,KALdqB,MAAQA,MAAM,WAOVE,QAAQC,QACDD,QAAQE,OAAM,SAACC,aAAS5B,MAAMiB,SAASW,gFAY5B,SAACpC,SAAUC,2BACnCD,UAAUI,GAAG,sBAAsB,WACjCH,MAAMY,eA2BRW,uBAAyB,SAACJ,SAAUL,aAChCsB,WAAatB,QAAQL,KAAK,sBAGb4B,IAAfD,YAEAE,QAAQC,MAAM,iDAAkDzB,SACzD,MAINN,MAAM4B,aAKXE,QAAQE,IAAIJ,YAGQA,WAAWK,MAAM,KAGlBC,KAAI,SAACC,eAEfnC,MAAMmC,QAxCK,SAACxB,SAAUyB,eAC1B,IAAMd,SAASX,SAAS0B,aACrB1B,SAAS0B,UAAUf,OAAOgB,IAAIC,UAAUC,SAASJ,kBACzCd,aAIT,KAsCImB,CAAgB9B,SAAUwB,QAJtBA,WAbJ,CAACP"}