<?phpnamespace local_learningcompanions;class chat {    protected $chatid;    protected $chat;    protected $context;    public function __construct($chatid) {        global $DB;        $this->chatid = $chatid;        $this->chat = $DB->get_record('lc_chat', array('id' => $chatid), '*', MUST_EXIST);        $this->context = \context_system::instance();        $this->filestorage = get_file_storage();    }    public function add_comment($comment, $attachments = []) {        global $DB, $USER;        // ICTODO: check if user has the permission to post to this chat        $obj = new \stdClass();        $obj->chatid = $this->chatid;        $obj->userid = $USER->id;        $obj->comment = $comment; // ICTODO: sanitize this! prevent XSS and stuff!        $obj->flagged = 0;        $obj->totalscore = 0;        $obj->timecreated = time();        $obj->timemodified = 0;        $DB->insert_record('lc_chat_comment', $obj);        // ICTODO: save attachments    }    public function update_comment($comment, $attachments) {        // ICTODO: update comment and attachments    }    public function get_comments() {        global $DB;        $comments = $DB->get_records('lc_chat_comment', array('chatid' => $this->chatid), 'timecreated');        $attachments = $this->get_attachments_of_comments($comments, 'attachment');        // ICTODO: also get inline attachments        foreach($comments as $comment) {            $comment->author = $DB->get_record('user', array('id' => $comment->userid));            if (array_key_exists($comment->id, $attachments)) {                $comment->attachments = $attachments;            } else {                $comment->attachments = [];            }        }        return $comments;    }    public function get_attachments_of_comments(array $comments, string $area) {        global $CFG;        require_once($CFG->dirroot.'/local/learningcompanions/lib.php');        return get_attachments_of_chat_comments($comments, $area);    }    /**     * returns the HTML and JS inclusions for the chat module to include on the chat page     * @return mixed     */    public function get_chat_module() {        global $USER, $OUTPUT;        $reactscript = \local_learningcompanions\get_chat_reactscript_path();        $form = $this->get_submission_form();        $context = array(            'userid' => $USER->id,            'reactscript' => $reactscript,            'form' => $form        );        return $OUTPUT->render_from_template('local_learningcompanions/chat', $context);    }    protected function get_submission_form()    {        global $DB;        require_once(__DIR__. "/chat_post_form.php");        // ICTODO: dynamically get the course and module from the currently selected group        $customdata = [        ];        $form = new \local_learningcompanions\chat_post_form(null, $customdata);        $draftitemid = file_get_submitted_draft_itemid('attachments');        $postid = empty($post->id) ? null : $post->id;        $attachoptions = \local_learningcompanions\chat_post_form::attachment_options();        $context = \context_system::instance();        file_prepare_draft_area($draftitemid, $context, 'local_learningcompanions', 'attachment', $postid, $attachoptions);        $postid = empty($post->id) ? null : $post->id;        $draftideditor = file_get_submitted_draft_itemid('message');        $form->set_data(            array(                'attachments' => $draftitemid,                'subject' => '',                'message' => array(                    'text' => '',                    'format' => !isset($post->messageformat) || !is_numeric($post->messageformat) ?                        editors_get_preferred_format() : $post->messageformat,                    'itemid' => $draftideditor                ),                'userid' => $post->userid,                'chatid' => $post->id,                'discussion' => $post->discussion,                'course' => $course->id,                'isprivatereply' => $post->isprivatereply ?? false            )        );        $output = $form->render();        $output = str_replace("col-md-3", "d-none", $output);        $output = str_replace("col-md-9", "", $output);        return $output;    }}