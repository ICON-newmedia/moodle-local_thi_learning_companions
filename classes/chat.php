<?phpnamespace local_learningcompanions;class chat {    protected $chatid;    protected $chat;    protected $context;    public function __construct($chatid) {        global $DB;        $this->chatid = $chatid;        $this->chat = $DB->get_record('lc_chat', array('id' => $chatid), '*', MUST_EXIST);        $this->context = \context_system::instance();        $this->filestorage = get_file_storage();    }    public function add_comment($comment, $attachments = []) {        global $DB, $USER;        // ICTODO: check if user has the permission to post to this chat        $obj = new \stdClass();        $obj->chatid = $this->chatid;        $obj->userid = $USER->id;        $obj->comment = $comment; // ICTODO: sanitize this! prevent XSS and stuff!        $obj->flagged = 0;        $obj->totalscore = 0;        $obj->timecreated = time();        $obj->timemodified = 0;        $DB->insert_record('lc_chat_comment', $obj);        // ICTODO: save attachments    }    public function update_comment($comment, $attachments) {        // ICTODO: update comment and attachments    }    public function get_comments() {        global $DB;        $comments = $DB->get_records('lc_chat_comment', array('chatid' => $this->chatid), 'timecreated');        $attachments = $this->get_attachments_of_comments($comments, 'attachment');        // ICTODO: also get inline attachments        foreach($comments as $comment) {            $comment->author = $DB->get_record('user', array('id' => $comment->userid));            if (array_key_exists($comment->id, $attachments)) {                $comment->attachments = $attachments;            } else {                $comment->attachments = [];            }        }        return $comments;    }    public function get_attachments_of_comments(array $comments, string $area) {        global $CFG;        require_once($CFG->dirroot.'/local/learningcompanions/lib.php');        return get_attachments_of_chat_comments($comments, $area);    }}