<?phpnamespace local_learningcompanions;class groups {    /**     * @param int $groupid     * @return false|mixed|\stdClass     * @throws \dml_exception     */    public static function get_group_by_id($groupid) {        global $DB;        $group = $DB->get_record('lc_groups', array('id' => $groupid));        $group->groupmembers = self::get_group_members($groupid);        $group->keywords = self::get_group_keywords($groupid);        // ICTODO: fetch course and course category along with relevant metadata from course and course category, like topic and such        return $group;    }    /**     * @param int $groupid     * @return array     * @throws \dml_exception     */    public static function get_group_members($groupid) {        global $DB;        $groupmembers = $DB->get_records_sql(            'SELECT DISTINCT u.*, gm.isadmin                FROM {user} u                JOIN {lc_group_members} gm ON gm.userid = u.id AND u.deleted = 0                WHERE gm.groupid = ?',            array($groupid)        );        return $groupmembers;    }    /**     * @param int $groupid     * @return array     * @throws \dml_exception     */    public static function get_group_keywords($groupid) {        global $DB;        $keywords = $DB->get_records_sql(            'SELECT DISTINCT k.*            FROM {lc_keywords} k            JOIN {lc_groups_keywords} gk ON gk.groupid = ? AND gk.keywordid = k.id',            array($groupid)        );        return $keywords;    }    public static function get_groups_of_user($userid, $sortby = 'latestcomment') {        global $DB;        $groupCategory = get_config('local_learningcompanions', 'category');        $subCategories = self::get_all_subcategories($groupCategory);        switch($sortby) {            case 'earliestcomment':                $order = 'ORDER BY posts.created ASC';                break;            case 'mylatestcomment':                $order = 'ORDER BY myposts.created DESC';                break;            case 'myearliestcomment':                $order = 'ORDER BY myposts.created ASC';                break;            case 'latestcomment':            default:                $order = 'ORDER BY posts.created DESC';                break;        }        list($sqlIN, $params) = $DB->get_in_or_equal(array_keys($subCategories));        array_unshift($params, $userid);        $params[] = $groupCategory;        // ICTODO: refactor this - we probably won't be using courses and forums as a basis        $query = "SELECT DISTINCT c.*        FROM {course} c        JOIN {course_categories} cat ON cat.id = c.category        JOIN {user_enrolments} en ON en.userid = ?        JOIN {enrol} e ON e.id = en.enrolid AND e.courseid = c.id        LEFT JOIN {forum} f ON c.id = f.course        LEFT JOIN {forum_discussions} fd ON fd.forum = f.id        LEFT JOIN {forum_posts} posts ON posts.discussion = fd.id        LEFT JOIN {forum_posts} myposts ON posts.discussion = fd.id        WHERE cat.id " . $sqlIN . " OR cat.id = ? " . $order;        $groups = $DB->get_records_sql($query, $params);        return $groups;    }    protected static function get_all_subcategories($categoryID) {        global $DB;        $return = $subcategories = $DB->get_records('course_categories', array('parent' => $categoryID));        foreach($subcategories as $subcategory) {            $children = self::get_all_subcategories($subcategory->id);            if (!empty($children)) {                $return = $return + $children;            }        }        return $return;    }    public static function invite_user_to_group($userid, $groupid) {        // ICTODO: send invitation    }}