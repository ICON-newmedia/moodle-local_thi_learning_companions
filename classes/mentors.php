<?phpnamespace local_learningcompanions;class mentors {    public static function get_mentors($topic = '', $supermentorsonly = false) {    }    public static function get_my_mentors() {    }    public static function may_become_mentor() {    }    public static function is_mentor($userid = null) {        global $USER;        $context = \context_system::instance();        $userid = is_null($userid) ? $USER->id : $userid;        return has_capability('local/learningcompanions:mentor_ismentor', $context, $userid); // Maybe access restriction by database entry    }    public static function is_supermentor($userid = null) {        global $USER;        $context = \context_system::instance();        $userid = is_null($userid) ? $USER->id : $userid;        return has_capability('local/learningcompanions:mentor_issupermentor', $context, $userid); // Maybe access restriction by database entry    }    public static function is_tutor($userid = null) {        global $USER;        $context = \context_system::instance();        $userid = is_null($userid) ? $USER->id : $userid;        return has_capability('local/learningcompanions:mentor_istutor', $context, $userid); // Maybe access restriction by database entry or teacher role    }    /**     * @param int  $userid     * @param bool $extended     * @return array     * @throws \dml_exception     */    public static function get_my_asked_questions(int $userid, bool $extended = false): array {        global $DB;        if ($extended) {            $sql = 'SELECT q.*,                           FROM_UNIXTIME(q.timecreated, "%d.%m.%Y") AS dateasked,                           (SELECT COUNT(a.id) FROM {lc_mentor_answers} a WHERE a.questionid = q.id) answercount,                           (SELECT FROM_UNIXTIME(MAX(a.timecreated), "%d.%m.%Y") FROM {lc_mentor_answers} a WHERE a.questionid = q.id) lastactivity                      FROM {lc_mentor_questions} q                     WHERE q.askedby = ?';            return $DB->get_records_sql($sql, array($userid));        }        return $DB->get_records('lc_mentor_questions', array('askedby' => $userid));    }    public static function get_all_mentor_questions(int $userid = null, bool $onlyopen = false, bool $extended = false): array {        global $DB;        if ($extended) {            $sql = 'SELECT q.*,                           FROM_UNIXTIME(q.timecreated, "%d.%m.%Y") AS dateasked,                           (SELECT COUNT(a.id) FROM {lc_mentor_answers} a WHERE a.questionid = q.id) answercount,                           (SELECT FROM_UNIXTIME(MAX(a.timecreated), "%d.%m.%Y") FROM {lc_mentor_answers} a WHERE a.questionid = q.id) lastactivity                      FROM {lc_mentor_questions} q';            $params = array();            if (!is_null($userid)) {                $sql .= empty($params) ? ' WHERE q.mentorid = ?' : ' AND q.mentorid = ?';                $params[] = $userid;            }            if ($onlyopen) {                $sql .= empty($params) ? ' WHERE q.timeclosed IS NULL' : ' AND q.timeclosed IS NULL';            }            return $DB->get_records_sql($sql, $params);        }        $params = array();        if (!is_null($userid)) $params['mentorid'] = $userid;        $questions = $DB->get_records('lc_mentor_questions', $params);        if ($onlyopen) {            $questions = array_filter($questions, function($question) {                return is_null($question->timeclosed);            });        }        return $questions;    }    public static function get_all_mentor_question_answers($questionid) {        global $DB;    }    public static function get_latest_nugget_comments($userid, $cmid = null) {        return array();    }}