<?phpnamespace local_learningcompanions;class mentors {    /**     * @param $topic     * @param $supermentorsonly     * @return array     * @throws \coding_exception     * @throws \dml_exception     */    public static function get_mentors($topic = null, $supermentorsonly = false): array {        global $CFG, $DB, $OUTPUT;        // ICTODO: There is definitely a better way to query this.        // ICTODO: Maybe split into basic and extended function.        require_once($CFG->dirroot.'/local/learningcompanions/lib.php');        $sql = 'SELECT DISTINCT m.userid,                       u.*                    FROM {lc_mentors} m             LEFT JOIN {user} u ON u.id = m.userid';        $params = array();        if (!is_null($topic)) {            $sql .= ' WHERE m.topic = ?';            $params[] = (int)$topic;        }        $mentors = $DB->get_records_sql($sql, $params);        $sql = 'SELECT m.topic,                       k.keyword                  FROM {lc_mentors} m             LEFT JOIN {lc_keywords} k ON k.id = m.topic                 WHERE m.userid = ?';        foreach ($mentors as $mentor) {            $mentor->issupermentor = self::is_supermentor($mentor->userid);            if ($supermentorsonly && !$mentor->issupermentor) {                unset($mentors[$mentor->userid]);            } else {                $mentor->topics = $DB->get_records_sql($sql, array($mentor->userid));                $mentor->fullname = fullname($mentor);                $mentor->profileurl = $CFG->wwwroot.'/user/profile.php?id='.$mentor->userid;                $mentor->userpic = $OUTPUT->user_picture($mentor, array('link' => false, 'visibletoscreenreaders' => false,                                                                        'class' => 'userpicture'));                $mentor->status = get_user_status($mentor->userid);                $topiclist = array();                foreach ($mentor->topics as $mentorTopic) {                    $topiclist[] = $mentorTopic->keyword;                }                $mentor->topiclist = implode(', ', $topiclist);            }        }        return $mentors;    }    public static function get_my_mentors() {    }    public static function may_become_mentor() {    }    /**     * @param $userid     * @return bool     * @throws \coding_exception     * @throws \dml_exception     */    public static function is_mentor($userid = null) {        global $USER;        $context = \context_system::instance();        $userid = is_null($userid) ? $USER->id : $userid;        return has_capability('local/learningcompanions:mentor_ismentor', $context, $userid); // Maybe access restriction by database entry    }    /**     * @param $userid     * @return bool     * @throws \coding_exception     * @throws \dml_exception     */    public static function is_supermentor($userid = null) {        global $USER;        $context = \context_system::instance();        $userid = is_null($userid) ? $USER->id : $userid;        return has_capability('local/learningcompanions:mentor_issupermentor', $context, $userid); // Maybe access restriction by database entry    }    /**     * @param $userid     * @return bool     * @throws \coding_exception     * @throws \dml_exception     */    public static function is_tutor($userid = null) {        global $USER;        $context = \context_system::instance();        $userid = is_null($userid) ? $USER->id : $userid;        return has_capability('local/learningcompanions:mentor_istutor', $context, $userid); // Maybe access restriction by database entry or teacher role    }    /**     * @param int  $userid     * @param bool $extended     * @return array     * @throws \dml_exception     */    public static function get_my_asked_questions(int $userid, bool $extended = false): array {        global $DB;        if ($extended) {            $sql = 'SELECT q.*,                           FROM_UNIXTIME(q.timecreated, "%d.%m.%Y") AS dateasked,                           FROM_UNIXTIME(q.timeclosed, "%d.%m.%Y - %H:%i") AS dateclosed,                           (SELECT COUNT(a.id) FROM {lc_mentor_answers} a WHERE a.questionid = q.id) answercount,                           (SELECT FROM_UNIXTIME(MAX(a.timecreated), "%d.%m.%Y") FROM {lc_mentor_answers} a WHERE a.questionid = q.id) lastactivity                      FROM {lc_mentor_questions} q                     WHERE q.askedby = ?';            return $DB->get_records_sql($sql, array($userid));        }        return $DB->get_records('lc_mentor_questions', array('askedby' => $userid));    }    /**     * @param int|null $userid     * @param bool     $onlyopen     * @param bool     $extended     * @return array     * @throws \dml_exception     */    public static function get_all_mentor_questions(int $userid = null, bool $onlyopen = false, bool $extended = false): array {        global $DB;        if ($extended) {            $sql = 'SELECT q.*,                           FROM_UNIXTIME(q.timecreated, "%d.%m.%Y") AS dateasked,                           FROM_UNIXTIME(q.timeclosed, "%d.%m.%Y - %H:%i") AS dateclosed,                           (SELECT COUNT(a.id) FROM {lc_mentor_answers} a WHERE a.questionid = q.id) answercount,                           (SELECT FROM_UNIXTIME(MAX(a.timecreated), "%d.%m.%Y") FROM {lc_mentor_answers} a WHERE a.questionid = q.id) lastactivity                      FROM {lc_mentor_questions} q';            $params = array();            if (!is_null($userid)) {                $sql .= empty($params) ? ' WHERE q.mentorid = ?' : ' AND q.mentorid = ?';                $params[] = $userid;            } else {                $sql .= ' WHERE q.mentorid IS NULL';            }            if ($onlyopen) {                $sql .= empty($params) ? ' WHERE q.timeclosed IS NULL' : ' AND q.timeclosed IS NULL';            }            return $DB->get_records_sql($sql, $params);        }        $params = array();        if (!is_null($userid)) $params['mentorid'] = $userid;        $questions = $DB->get_records('lc_mentor_questions', $params);        if ($onlyopen) {            $questions = array_filter($questions, function($question) {                return is_null($question->timeclosed);            });        }        return $questions;    }    public static function get_all_mentor_question_answers($questionid) {        global $DB;    }    public static function get_latest_nugget_comments($userid, $cmid = null) {        return array();    }    /**     * @param $questionid     * @return bool     * @throws \dml_exception     */    public static function delete_asked_question($questionid) {        global $DB;        return $DB->delete_records('lc_mentor_answers', array('questionid' => $questionid))            && $DB->delete_records('lc_mentor_questions', array('id' => $questionid));    }}